---
layout: canvas-post
title: vectors
date: 2018-03-07 14:29:16
categories: programming
---

### Click and drag (desktop) or tap two points (mobile) on canvas.

<p id="outbox">msg</p>

<script>

const c = canvas.getContext('2d')

const h = canvas.height
const w = canvas.width

var log = document.querySelector('#outbox')

class Vector {
	static fromPolar(theta, r) {
		return new Vector(r * Math.cos(theta), - r * Math.sin(theta))
	}
	constructor(x, y) {
		this.x = x
		this.y = y
	}

	// copy of the current Vector
	currentVec() {
		return new Vector(this.x, this.y)
	}

	plus(val) {
		// scalar mult
		if (typeof val == "number") {
			return new Vector(this.x + val, this.y + val)
		}

		// dot product
		if (val instanceof Vector) {
			return new Vector(this.x + val.x, this.y + val.y)
		}

		throw "arg must be Vector or number"
	}

	minus(val) {
	// scalar mult
		if (typeof val == "number") {
			return new Vector(this.x - val, this.y - val)
		}

		// dot product
		if (val instanceof Vector) {
			return new Vector(this.x - val.x, this.y - val.y)
		}

		throw "arg must be Vector or number"
	}

	mult(val) {
		// scalar mult
		if (typeof val == "number") {
			return new Vector(this.x * val, this.y * val)
		}

		// dot product
		if (val instanceof Vector) {
			return this.x * val.x + this.y + val.y
		}

		throw "arg must be Vector or number"

	}

	div(val) {
		// scalar div
		if (typeof val != "number") {
			throw "arg must be number"
		}

		return mult(1.0/val)
	}

	mag() {
		return Math.sqrt(this.x ** 2 + this.y ** 2)
	}

	theta() {
		return Math.atan2(this.y, this.x)
	}
}

const mouse = new Vector(0, 0);

// update mouse location
(function(){
	let bw = parseInt(
		getComputedStyle(canvas)
			.getPropertyValue("border-top-width")
			.replace("px", "")
	)

	canvas.addEventListener("mousemove", (e) => {
		mouse.x = e.x - canvas.offsetLeft - bw
		mouse.y = e.y - canvas.offsetTop - bw
	})
})();


drag_start = null
drag_end = null

// touch support
if( /Android|webOS|iPhone|iPad|iPod|BlackBerry/i.test(navigator.userAgent) ) {
	let is_start = true

	canvas.addEventListener("mousedown", (e) => {
		if (is_start) {
			drag_start = mouse.currentVec()
			drag_end = mouse	
			is_start = false
		} else {
			drag_end = mouse.currentVec()
			is_start = true
		}
	})
} else {
	canvas.addEventListener("mousedown", (e) => {
		drag_start = mouse.currentVec()
		drag_end = mouse
	})

	canvas.addEventListener("mouseup", (e) => {
		drag_end = mouse.currentVec()
	})
}



// vertecies, center, radius, rotation
function makeEqPoly(numVert, center, radius, theta) {
	let slice = 2 * Math.PI / numVert

	c.beginPath()
	let v = Vector.fromPolar(theta, radius).plus(center)
	c.moveTo(v.x, v.y)
	for(let i = 1; i <= numVert; i ++) {
		let ang = theta + slice * i
		v = Vector.fromPolar(ang, radius).plus(center)
		c.lineTo(v.x, v.y)
	}
	c.stroke()
}

function makeLine(p1, p2, style) {
	c.strokeStyle = style
	c.beginPath()
	c.moveTo(p1.x, p1.y)
	c.lineTo(p2.x, p2.y)
	c.stroke()
}

function makeVector(p1, p2) {
	let ret = new Vector(p2.x - p1.x, p1.y - p2.y)

	makeLine(p1, p2, 'black')
	makeEqPoly(3, p2, 10, ret.theta())

	// x component
	makeLine(p1, new Vector(p2.x, p1.y), 'blue')

	// y component
	makeLine(p1, new Vector(p1.x, p2.y), 'green')

	// y inverted because positive y is down in canvas
	return ret
}

function animate() {

	// clear screen
	c.clearRect(0, 0, canvas.width, canvas.height)

	let v = new Vector(0, 0)

	if (drag_start) {
		v = makeVector(drag_start, drag_end)
	}

	log.innerHTML = `
	X: ${v.x} <br/>
	Y: ${v.y} <br/>
	Magnitude: ${v.mag().toFixed(2)} <br/>
	Angle: ${(360 * v.theta() / (2 * Math.PI)).toFixed(2)}Â°`

	window.requestAnimationFrame(animate)
}

animate()

</script>
